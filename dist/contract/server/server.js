// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "server/server.proto" (package "server", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType as MessageType$ } from "@protobuf-ts/runtime";
import { Any } from "../google/protobuf/any";
/**
 * @generated from protobuf enum server.MessageType
 */
export var MessageType;
(function (MessageType) {
    /**
     * @generated from protobuf enum value: Null0 = 0;
     */
    MessageType[MessageType["Null0"] = 0] = "Null0";
    /**
     * @generated from protobuf enum value: Call = 1;
     */
    MessageType[MessageType["Call"] = 1] = "Call";
    /**
     * @generated from protobuf enum value: Subscribe = 2;
     */
    MessageType[MessageType["Subscribe"] = 2] = "Subscribe";
    /**
     * @generated from protobuf enum value: Unsubscribe = 3;
     */
    MessageType[MessageType["Unsubscribe"] = 3] = "Unsubscribe";
    /**
     * @generated from protobuf enum value: Event = 4;
     */
    MessageType[MessageType["Event"] = 4] = "Event";
})(MessageType || (MessageType = {}));
/**
 * @generated from protobuf enum server.Domain
 */
export var Domain;
(function (Domain) {
    /**
     * @generated from protobuf enum value: Null1 = 0;
     */
    Domain[Domain["Null1"] = 0] = "Null1";
    /**
     * @generated from protobuf enum value: Socket = 1;
     */
    Domain[Domain["Socket"] = 1] = "Socket";
    /**
     * @generated from protobuf enum value: Auth = 2;
     */
    Domain[Domain["Auth"] = 2] = "Auth";
    /**
     * @generated from protobuf enum value: Users = 3;
     */
    Domain[Domain["Users"] = 3] = "Users";
    /**
     * @generated from protobuf enum value: Assist = 4;
     */
    Domain[Domain["Assist"] = 4] = "Assist";
    /**
     * @generated from protobuf enum value: Gsm = 5;
     */
    Domain[Domain["Gsm"] = 5] = "Gsm";
})(Domain || (Domain = {}));
/**
 * @generated from protobuf enum server.SubscribeAction
 */
export var SubscribeAction;
(function (SubscribeAction) {
    /**
     * @generated from protobuf enum value: Null2 = 0;
     */
    SubscribeAction[SubscribeAction["Null2"] = 0] = "Null2";
    /**
     * @generated from protobuf enum value: Init = 1;
     */
    SubscribeAction[SubscribeAction["Init"] = 1] = "Init";
    /**
     * @generated from protobuf enum value: Create = 2;
     */
    SubscribeAction[SubscribeAction["Create"] = 2] = "Create";
    /**
     * @generated from protobuf enum value: Update = 3;
     */
    SubscribeAction[SubscribeAction["Update"] = 3] = "Update";
    /**
     * @generated from protobuf enum value: Delete = 4;
     */
    SubscribeAction[SubscribeAction["Delete"] = 4] = "Delete";
})(SubscribeAction || (SubscribeAction = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Meta$Type extends MessageType$ {
    constructor() {
        super("server.Meta", [
            { no: 1, name: "type", kind: "enum", T: () => ["server.MessageType", MessageType] },
            { no: 2, name: "domain", kind: "enum", T: () => ["server.Domain", Domain] },
            { no: 3, name: "method", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.domain = 0;
        message.method = 0;
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* server.MessageType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* server.Domain domain */ 2:
                    message.domain = reader.int32();
                    break;
                case /* uint32 method */ 3:
                    message.method = reader.uint32();
                    break;
                case /* uint32 id */ 4:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* server.MessageType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* server.Domain domain = 2; */
        if (message.domain !== 0)
            writer.tag(2, WireType.Varint).int32(message.domain);
        /* uint32 method = 3; */
        if (message.method !== 0)
            writer.tag(3, WireType.Varint).uint32(message.method);
        /* uint32 id = 4; */
        if (message.id !== 0)
            writer.tag(4, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.Meta
 */
export const Meta = new Meta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamsRequest$Type extends MessageType$ {
    constructor() {
        super("server.ParamsRequest", [
            { no: 1, name: "meta", kind: "message", T: () => Meta },
            { no: 2, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* server.Meta meta */ 1:
                    message.meta = Meta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* google.protobuf.Any data */ 2:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* server.Meta meta = 1; */
        if (message.meta)
            Meta.internalBinaryWrite(message.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any data = 2; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.ParamsRequest
 */
export const ParamsRequest = new ParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType$ {
    constructor() {
        super("server.Response", [
            { no: 1, name: "meta", kind: "message", T: () => Meta },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* server.Meta meta */ 1:
                    message.meta = Meta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                case /* google.protobuf.Any data */ 3:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* server.Meta meta = 1; */
        if (message.meta)
            Meta.internalBinaryWrite(message.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        /* google.protobuf.Any data = 3; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.Response
 */
export const Response = new Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeData$Type extends MessageType$ {
    constructor() {
        super("server.SubscribeData", [
            { no: 1, name: "action", kind: "enum", T: () => ["server.SubscribeAction", SubscribeAction] },
            { no: 2, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.action = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* server.SubscribeAction action */ 1:
                    message.action = reader.int32();
                    break;
                case /* google.protobuf.Any data */ 2:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* server.SubscribeAction action = 1; */
        if (message.action !== 0)
            writer.tag(1, WireType.Varint).int32(message.action);
        /* google.protobuf.Any data = 2; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message server.SubscribeData
 */
export const SubscribeData = new SubscribeData$Type();
/**
 * @generated ServiceType for protobuf service server.Server
 */
export const Server = new ServiceType("server.Server", [
    { name: "Request", options: {}, I: ParamsRequest, O: Empty }
]);
