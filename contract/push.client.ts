// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "push.proto" (package "gsm", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Push } from "./push";
import type { ScheduleRequest } from "./push";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CommonResponse } from "./push";
import type { NowRequest } from "./push";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service gsm.Push
 */
export interface IPushClient {
    /**
     * @generated from protobuf rpc: Now(gsm.NowRequest) returns (gsm.CommonResponse);
     */
    now(input: NowRequest, options?: RpcOptions): UnaryCall<NowRequest, CommonResponse>;
    /**
     * @generated from protobuf rpc: Schedule(gsm.ScheduleRequest) returns (gsm.CommonResponse);
     */
    schedule(input: ScheduleRequest, options?: RpcOptions): UnaryCall<ScheduleRequest, CommonResponse>;
}
/**
 * @generated from protobuf service gsm.Push
 */
export class PushClient implements IPushClient, ServiceInfo {
    typeName = Push.typeName;
    methods = Push.methods;
    options = Push.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Now(gsm.NowRequest) returns (gsm.CommonResponse);
     */
    now(input: NowRequest, options?: RpcOptions): UnaryCall<NowRequest, CommonResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<NowRequest, CommonResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Schedule(gsm.ScheduleRequest) returns (gsm.CommonResponse);
     */
    schedule(input: ScheduleRequest, options?: RpcOptions): UnaryCall<ScheduleRequest, CommonResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScheduleRequest, CommonResponse>("unary", this._transport, method, opt, input);
    }
}
