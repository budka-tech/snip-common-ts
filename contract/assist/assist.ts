// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "assist/assist.proto" (package "assist", syntax proto3)
// tslint:disable
import { Response } from "../common/common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message assist.UUID
 */
export interface UUID {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * Folder Messages
 *
 * @generated from protobuf message assist.Folder
 */
export interface Folder {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
}
/**
 * @generated from protobuf message assist.CreateFolderRequest
 */
export interface CreateFolderRequest {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message assist.CreateFolderResponse
 */
export interface CreateFolderResponse {
    /**
     * @generated from protobuf field: assist.Folder folder = 1;
     */
    folder?: Folder;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.DeleteFolderRequest
 */
export interface DeleteFolderRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
}
/**
 * @generated from protobuf message assist.GetFolderByIDRequest
 */
export interface GetFolderByIDRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
}
/**
 * @generated from protobuf message assist.GetFolderByIDResponse
 */
export interface GetFolderByIDResponse {
    /**
     * @generated from protobuf field: assist.Folder folder = 1;
     */
    folder?: Folder;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.GetUserFoldersRequest
 */
export interface GetUserFoldersRequest {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
}
/**
 * @generated from protobuf message assist.GetUserFoldersResponse
 */
export interface GetUserFoldersResponse {
    /**
     * @generated from protobuf field: repeated assist.Folder folders = 1;
     */
    folders: Folder[];
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * Chat Messages
 *
 * @generated from protobuf message assist.Chat
 */
export interface Chat {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional bytes folder_id = 3;
     */
    folderId?: Uint8Array;
    /**
     * @generated from protobuf field: optional string title = 4;
     */
    title?: string;
}
/**
 * @generated from protobuf message assist.CreateChatRequest
 */
export interface CreateChatRequest {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional bytes folder_id = 3;
     */
    folderId?: Uint8Array;
    /**
     * @generated from protobuf field: optional string title = 4;
     */
    title?: string;
}
/**
 * @generated from protobuf message assist.CreateChatResponse
 */
export interface CreateChatResponse {
    /**
     * @generated from protobuf field: assist.Chat chat = 1;
     */
    chat?: Chat;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.ChangeChatFolderRequest
 */
export interface ChangeChatFolderRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes folder_id = 2;
     */
    folderId?: Uint8Array;
}
/**
 * @generated from protobuf message assist.ChangeChatFolderResponse
 */
export interface ChangeChatFolderResponse {
    /**
     * @generated from protobuf field: assist.Chat chat = 1;
     */
    chat?: Chat;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.ChangeChatTitleRequest
 */
export interface ChangeChatTitleRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: optional string title = 2;
     */
    title?: string;
}
/**
 * @generated from protobuf message assist.ChangeChatTitleResponse
 */
export interface ChangeChatTitleResponse {
    /**
     * @generated from protobuf field: assist.Chat chat = 1;
     */
    chat?: Chat;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.DeleteChatRequest
 */
export interface DeleteChatRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
}
/**
 * @generated from protobuf message assist.GetChatByIDRequest
 */
export interface GetChatByIDRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
}
/**
 * @generated from protobuf message assist.GetChatByIDResponse
 */
export interface GetChatByIDResponse {
    /**
     * @generated from protobuf field: assist.Chat chat = 1;
     */
    chat?: Chat;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.GetChatsInFolderRequest
 */
export interface GetChatsInFolderRequest {
    /**
     * @generated from protobuf field: bytes folder_id = 1;
     */
    folderId: Uint8Array;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
}
/**
 * @generated from protobuf message assist.GetChatsInFolderResponse
 */
export interface GetChatsInFolderResponse {
    /**
     * @generated from protobuf field: repeated assist.Chat chats = 1;
     */
    chats: Chat[];
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.GetUserChatsRequest
 */
export interface GetUserChatsRequest {
    /**
     * @generated from protobuf field: int32 user_id = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
}
/**
 * @generated from protobuf message assist.GetUserChatsResponse
 */
export interface GetUserChatsResponse {
    /**
     * @generated from protobuf field: repeated assist.Chat chats = 1;
     */
    chats: Chat[];
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * Message Messages
 *
 * @generated from protobuf message assist.Message
 */
export interface Message {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: bytes chat_id = 2;
     */
    chatId: Uint8Array;
    /**
     * @generated from protobuf field: bool is_bot = 3;
     */
    isBot: boolean;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message assist.CreateMessageRequest
 */
export interface CreateMessageRequest {
    /**
     * @generated from protobuf field: bytes chat_id = 1;
     */
    chatId: Uint8Array;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message assist.CreateMessageResponse
 */
export interface CreateMessageResponse {
    /**
     * @generated from protobuf field: assist.Message message = 1;
     */
    message?: Message;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.GetMessageByIDRequest
 */
export interface GetMessageByIDRequest {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
}
/**
 * @generated from protobuf message assist.GetMessageByIDResponse
 */
export interface GetMessageByIDResponse {
    /**
     * @generated from protobuf field: assist.Message message = 1;
     */
    message?: Message;
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
/**
 * @generated from protobuf message assist.GetMessagesInChatRequest
 */
export interface GetMessagesInChatRequest {
    /**
     * @generated from protobuf field: bytes chat_id = 1;
     */
    chatId: Uint8Array;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp from_message_date = 3;
     */
    fromMessageDate?: Timestamp;
}
/**
 * @generated from protobuf message assist.GetMessagesInChatResponse
 */
export interface GetMessagesInChatResponse {
    /**
     * @generated from protobuf field: repeated assist.Message messages = 1;
     */
    messages: Message[];
    /**
     * @generated from protobuf field: uint32 status = 2;
     */
    status: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UUID$Type extends MessageType<UUID> {
    constructor() {
        super("assist.UUID", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UUID>): UUID {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UUID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UUID): UUID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UUID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.UUID
 */
export const UUID = new UUID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Folder$Type extends MessageType<Folder> {
    constructor() {
        super("assist.Folder", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Folder>): Folder {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        message.userId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<Folder>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Folder): Folder {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Folder, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.Folder
 */
export const Folder = new Folder$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFolderRequest$Type extends MessageType<CreateFolderRequest> {
    constructor() {
        super("assist.CreateFolderRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFolderRequest>): CreateFolderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateFolderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFolderRequest): CreateFolderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFolderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.CreateFolderRequest
 */
export const CreateFolderRequest = new CreateFolderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFolderResponse$Type extends MessageType<CreateFolderResponse> {
    constructor() {
        super("assist.CreateFolderResponse", [
            { no: 1, name: "folder", kind: "message", T: () => Folder },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFolderResponse>): CreateFolderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateFolderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFolderResponse): CreateFolderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Folder folder */ 1:
                    message.folder = Folder.internalBinaryRead(reader, reader.uint32(), options, message.folder);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFolderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Folder folder = 1; */
        if (message.folder)
            Folder.internalBinaryWrite(message.folder, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.CreateFolderResponse
 */
export const CreateFolderResponse = new CreateFolderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFolderRequest$Type extends MessageType<DeleteFolderRequest> {
    constructor() {
        super("assist.DeleteFolderRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteFolderRequest>): DeleteFolderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeleteFolderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFolderRequest): DeleteFolderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFolderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.DeleteFolderRequest
 */
export const DeleteFolderRequest = new DeleteFolderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFolderByIDRequest$Type extends MessageType<GetFolderByIDRequest> {
    constructor() {
        super("assist.GetFolderByIDRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetFolderByIDRequest>): GetFolderByIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetFolderByIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFolderByIDRequest): GetFolderByIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFolderByIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetFolderByIDRequest
 */
export const GetFolderByIDRequest = new GetFolderByIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFolderByIDResponse$Type extends MessageType<GetFolderByIDResponse> {
    constructor() {
        super("assist.GetFolderByIDResponse", [
            { no: 1, name: "folder", kind: "message", T: () => Folder },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetFolderByIDResponse>): GetFolderByIDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetFolderByIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFolderByIDResponse): GetFolderByIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Folder folder */ 1:
                    message.folder = Folder.internalBinaryRead(reader, reader.uint32(), options, message.folder);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFolderByIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Folder folder = 1; */
        if (message.folder)
            Folder.internalBinaryWrite(message.folder, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetFolderByIDResponse
 */
export const GetFolderByIDResponse = new GetFolderByIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserFoldersRequest$Type extends MessageType<GetUserFoldersRequest> {
    constructor() {
        super("assist.GetUserFoldersRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserFoldersRequest>): GetUserFoldersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUserFoldersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserFoldersRequest): GetUserFoldersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserFoldersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetUserFoldersRequest
 */
export const GetUserFoldersRequest = new GetUserFoldersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserFoldersResponse$Type extends MessageType<GetUserFoldersResponse> {
    constructor() {
        super("assist.GetUserFoldersResponse", [
            { no: 1, name: "folders", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Folder },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserFoldersResponse>): GetUserFoldersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.folders = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUserFoldersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserFoldersResponse): GetUserFoldersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated assist.Folder folders */ 1:
                    message.folders.push(Folder.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserFoldersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated assist.Folder folders = 1; */
        for (let i = 0; i < message.folders.length; i++)
            Folder.internalBinaryWrite(message.folders[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetUserFoldersResponse
 */
export const GetUserFoldersResponse = new GetUserFoldersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Chat$Type extends MessageType<Chat> {
    constructor() {
        super("assist.Chat", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "folder_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Chat>): Chat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<Chat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chat): Chat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* optional bytes folder_id */ 3:
                    message.folderId = reader.bytes();
                    break;
                case /* optional string title */ 4:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* optional bytes folder_id = 3; */
        if (message.folderId !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.folderId);
        /* optional string title = 4; */
        if (message.title !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.Chat
 */
export const Chat = new Chat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChatRequest$Type extends MessageType<CreateChatRequest> {
    constructor() {
        super("assist.CreateChatRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "folder_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateChatRequest>): CreateChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateChatRequest): CreateChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* optional bytes folder_id */ 3:
                    message.folderId = reader.bytes();
                    break;
                case /* optional string title */ 4:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* optional bytes folder_id = 3; */
        if (message.folderId !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.folderId);
        /* optional string title = 4; */
        if (message.title !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.CreateChatRequest
 */
export const CreateChatRequest = new CreateChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChatResponse$Type extends MessageType<CreateChatResponse> {
    constructor() {
        super("assist.CreateChatResponse", [
            { no: 1, name: "chat", kind: "message", T: () => Chat },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateChatResponse>): CreateChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateChatResponse): CreateChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Chat chat */ 1:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Chat chat = 1; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.CreateChatResponse
 */
export const CreateChatResponse = new CreateChatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeChatFolderRequest$Type extends MessageType<ChangeChatFolderRequest> {
    constructor() {
        super("assist.ChangeChatFolderRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "folder_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeChatFolderRequest>): ChangeChatFolderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ChangeChatFolderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeChatFolderRequest): ChangeChatFolderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* optional bytes folder_id */ 2:
                    message.folderId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeChatFolderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* optional bytes folder_id = 2; */
        if (message.folderId !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.folderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.ChangeChatFolderRequest
 */
export const ChangeChatFolderRequest = new ChangeChatFolderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeChatFolderResponse$Type extends MessageType<ChangeChatFolderResponse> {
    constructor() {
        super("assist.ChangeChatFolderResponse", [
            { no: 1, name: "chat", kind: "message", T: () => Chat },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeChatFolderResponse>): ChangeChatFolderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangeChatFolderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeChatFolderResponse): ChangeChatFolderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Chat chat */ 1:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeChatFolderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Chat chat = 1; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.ChangeChatFolderResponse
 */
export const ChangeChatFolderResponse = new ChangeChatFolderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeChatTitleRequest$Type extends MessageType<ChangeChatTitleRequest> {
    constructor() {
        super("assist.ChangeChatTitleRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeChatTitleRequest>): ChangeChatTitleRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ChangeChatTitleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeChatTitleRequest): ChangeChatTitleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* optional string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeChatTitleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* optional string title = 2; */
        if (message.title !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.ChangeChatTitleRequest
 */
export const ChangeChatTitleRequest = new ChangeChatTitleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeChatTitleResponse$Type extends MessageType<ChangeChatTitleResponse> {
    constructor() {
        super("assist.ChangeChatTitleResponse", [
            { no: 1, name: "chat", kind: "message", T: () => Chat },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeChatTitleResponse>): ChangeChatTitleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangeChatTitleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeChatTitleResponse): ChangeChatTitleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Chat chat */ 1:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeChatTitleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Chat chat = 1; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.ChangeChatTitleResponse
 */
export const ChangeChatTitleResponse = new ChangeChatTitleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteChatRequest$Type extends MessageType<DeleteChatRequest> {
    constructor() {
        super("assist.DeleteChatRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteChatRequest>): DeleteChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<DeleteChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteChatRequest): DeleteChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.DeleteChatRequest
 */
export const DeleteChatRequest = new DeleteChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatByIDRequest$Type extends MessageType<GetChatByIDRequest> {
    constructor() {
        super("assist.GetChatByIDRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatByIDRequest>): GetChatByIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetChatByIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatByIDRequest): GetChatByIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatByIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetChatByIDRequest
 */
export const GetChatByIDRequest = new GetChatByIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatByIDResponse$Type extends MessageType<GetChatByIDResponse> {
    constructor() {
        super("assist.GetChatByIDResponse", [
            { no: 1, name: "chat", kind: "message", T: () => Chat },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatByIDResponse>): GetChatByIDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetChatByIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatByIDResponse): GetChatByIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Chat chat */ 1:
                    message.chat = Chat.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatByIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Chat chat = 1; */
        if (message.chat)
            Chat.internalBinaryWrite(message.chat, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetChatByIDResponse
 */
export const GetChatByIDResponse = new GetChatByIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatsInFolderRequest$Type extends MessageType<GetChatsInFolderRequest> {
    constructor() {
        super("assist.GetChatsInFolderRequest", [
            { no: 1, name: "folder_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatsInFolderRequest>): GetChatsInFolderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.folderId = new Uint8Array(0);
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetChatsInFolderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatsInFolderRequest): GetChatsInFolderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes folder_id */ 1:
                    message.folderId = reader.bytes();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatsInFolderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes folder_id = 1; */
        if (message.folderId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.folderId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetChatsInFolderRequest
 */
export const GetChatsInFolderRequest = new GetChatsInFolderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatsInFolderResponse$Type extends MessageType<GetChatsInFolderResponse> {
    constructor() {
        super("assist.GetChatsInFolderResponse", [
            { no: 1, name: "chats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Chat },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatsInFolderResponse>): GetChatsInFolderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chats = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetChatsInFolderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatsInFolderResponse): GetChatsInFolderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated assist.Chat chats */ 1:
                    message.chats.push(Chat.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatsInFolderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated assist.Chat chats = 1; */
        for (let i = 0; i < message.chats.length; i++)
            Chat.internalBinaryWrite(message.chats[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetChatsInFolderResponse
 */
export const GetChatsInFolderResponse = new GetChatsInFolderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserChatsRequest$Type extends MessageType<GetUserChatsRequest> {
    constructor() {
        super("assist.GetUserChatsRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserChatsRequest>): GetUserChatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUserChatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserChatsRequest): GetUserChatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserChatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetUserChatsRequest
 */
export const GetUserChatsRequest = new GetUserChatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserChatsResponse$Type extends MessageType<GetUserChatsResponse> {
    constructor() {
        super("assist.GetUserChatsResponse", [
            { no: 1, name: "chats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Chat },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserChatsResponse>): GetUserChatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chats = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUserChatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserChatsResponse): GetUserChatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated assist.Chat chats */ 1:
                    message.chats.push(Chat.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserChatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated assist.Chat chats = 1; */
        for (let i = 0; i < message.chats.length; i++)
            Chat.internalBinaryWrite(message.chats[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetUserChatsResponse
 */
export const GetUserChatsResponse = new GetUserChatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Message$Type extends MessageType<Message> {
    constructor() {
        super("assist.Message", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "chat_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "is_bot", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Message>): Message {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        message.chatId = new Uint8Array(0);
        message.isBot = false;
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<Message>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Message): Message {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* bytes chat_id */ 2:
                    message.chatId = reader.bytes();
                    break;
                case /* bool is_bot */ 3:
                    message.isBot = reader.bool();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 5:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Message, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* bytes chat_id = 2; */
        if (message.chatId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.chatId);
        /* bool is_bot = 3; */
        if (message.isBot !== false)
            writer.tag(3, WireType.Varint).bool(message.isBot);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* google.protobuf.Timestamp timestamp = 5; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.Message
 */
export const Message = new Message$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMessageRequest$Type extends MessageType<CreateMessageRequest> {
    constructor() {
        super("assist.CreateMessageRequest", [
            { no: 1, name: "chat_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMessageRequest>): CreateMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = new Uint8Array(0);
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<CreateMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMessageRequest): CreateMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes chat_id */ 1:
                    message.chatId = reader.bytes();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes chat_id = 1; */
        if (message.chatId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.chatId);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.CreateMessageRequest
 */
export const CreateMessageRequest = new CreateMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMessageResponse$Type extends MessageType<CreateMessageResponse> {
    constructor() {
        super("assist.CreateMessageResponse", [
            { no: 1, name: "message", kind: "message", T: () => Message },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMessageResponse>): CreateMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMessageResponse): CreateMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.CreateMessageResponse
 */
export const CreateMessageResponse = new CreateMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessageByIDRequest$Type extends MessageType<GetMessageByIDRequest> {
    constructor() {
        super("assist.GetMessageByIDRequest", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetMessageByIDRequest>): GetMessageByIDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetMessageByIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessageByIDRequest): GetMessageByIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessageByIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetMessageByIDRequest
 */
export const GetMessageByIDRequest = new GetMessageByIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessageByIDResponse$Type extends MessageType<GetMessageByIDResponse> {
    constructor() {
        super("assist.GetMessageByIDResponse", [
            { no: 1, name: "message", kind: "message", T: () => Message },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetMessageByIDResponse>): GetMessageByIDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMessageByIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessageByIDResponse): GetMessageByIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* assist.Message message */ 1:
                    message.message = Message.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessageByIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* assist.Message message = 1; */
        if (message.message)
            Message.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetMessageByIDResponse
 */
export const GetMessageByIDResponse = new GetMessageByIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessagesInChatRequest$Type extends MessageType<GetMessagesInChatRequest> {
    constructor() {
        super("assist.GetMessagesInChatRequest", [
            { no: 1, name: "chat_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "from_message_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetMessagesInChatRequest>): GetMessagesInChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = new Uint8Array(0);
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMessagesInChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessagesInChatRequest): GetMessagesInChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes chat_id */ 1:
                    message.chatId = reader.bytes();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* optional google.protobuf.Timestamp from_message_date */ 3:
                    message.fromMessageDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.fromMessageDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessagesInChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes chat_id = 1; */
        if (message.chatId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.chatId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* optional google.protobuf.Timestamp from_message_date = 3; */
        if (message.fromMessageDate)
            Timestamp.internalBinaryWrite(message.fromMessageDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetMessagesInChatRequest
 */
export const GetMessagesInChatRequest = new GetMessagesInChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMessagesInChatResponse$Type extends MessageType<GetMessagesInChatResponse> {
    constructor() {
        super("assist.GetMessagesInChatResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Message },
            { no: 2, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetMessagesInChatResponse>): GetMessagesInChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMessagesInChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMessagesInChatResponse): GetMessagesInChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated assist.Message messages */ 1:
                    message.messages.push(Message.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 status */ 2:
                    message.status = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMessagesInChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated assist.Message messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            Message.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).uint32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message assist.GetMessagesInChatResponse
 */
export const GetMessagesInChatResponse = new GetMessagesInChatResponse$Type();
/**
 * @generated ServiceType for protobuf service assist.Assist
 */
export const Assist = new ServiceType("assist.Assist", [
    { name: "CreateChat", options: {}, I: CreateChatRequest, O: CreateChatResponse },
    { name: "ChangeChatFolder", options: {}, I: ChangeChatFolderRequest, O: ChangeChatFolderResponse },
    { name: "ChangeChatTitle", options: {}, I: ChangeChatTitleRequest, O: ChangeChatTitleResponse },
    { name: "DeleteChat", options: {}, I: DeleteChatRequest, O: Response },
    { name: "GetChatByID", options: {}, I: GetChatByIDRequest, O: GetChatByIDResponse },
    { name: "GetChatsInFolder", options: {}, I: GetChatsInFolderRequest, O: GetChatsInFolderResponse },
    { name: "GetUserChats", options: {}, I: GetUserChatsRequest, O: GetUserChatsResponse },
    { name: "CreateFolder", options: {}, I: CreateFolderRequest, O: CreateFolderResponse },
    { name: "DeleteFolder", options: {}, I: DeleteFolderRequest, O: Response },
    { name: "GetFolderByID", options: {}, I: GetFolderByIDRequest, O: GetFolderByIDResponse },
    { name: "GetUserFolders", options: {}, I: GetUserFoldersRequest, O: GetUserFoldersResponse },
    { name: "CreateMessage", options: {}, I: CreateMessageRequest, O: CreateMessageResponse },
    { name: "GetMessageByID", options: {}, I: GetMessageByIDRequest, O: GetMessageByIDResponse },
    { name: "GetMessagesInChat", options: {}, I: GetMessagesInChatRequest, O: GetMessagesInChatResponse }
]);
