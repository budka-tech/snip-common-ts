// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "users/users.proto" (package "users", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message users.CommonRequest
 */
export interface CommonRequest {
    /**
     * @generated from protobuf field: uint32 accountId = 2;
     */
    accountId: number;
}
/**
 * @generated from protobuf message users.CommonResponse
 */
export interface CommonResponse {
    /**
     * @generated from protobuf field: bool status = 1;
     */
    status: boolean;
    /**
     * @generated from protobuf field: repeated uint32 codes = 2;
     */
    codes: number[];
}
/**
 * @generated from protobuf message users.HasSessionRequest
 */
export interface HasSessionRequest {
    /**
     * @generated from protobuf field: int64 sessionId = 1;
     */
    sessionId: bigint;
    /**
     * @generated from protobuf field: uint32 accountId = 2;
     */
    accountId: number;
}
/**
 * @generated from protobuf message users.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
}
/**
 * @generated from protobuf message users.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
}
/**
 * @generated from protobuf message users.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: int64 sessionId = 1;
     */
    sessionId: bigint;
    /**
     * @generated from protobuf field: users.Account account = 2;
     */
    account?: Account;
}
/**
 * @generated from protobuf message users.Account
 */
export interface Account {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: repeated string phones = 2;
     */
    phones: string[];
    /**
     * @generated from protobuf field: string photo = 3;
     */
    photo: string;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 5;
     */
    surname: string;
    /**
     * @generated from protobuf field: string patronymic = 6;
     */
    patronymic: string;
    /**
     * @generated from protobuf field: string birthdate = 7;
     */
    birthdate: string;
    /**
     * @generated from protobuf field: int32 country = 8;
     */
    country: number;
    /**
     * @generated from protobuf field: int32 locale = 9;
     */
    locale: number;
    /**
     * @generated from protobuf field: int32 timezone = 10;
     */
    timezone: number;
}
/**
 * @generated from protobuf message users.UpdateAccountDataRequest
 */
export interface UpdateAccountDataRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 2;
     */
    surname: string;
    /**
     * @generated from protobuf field: string patronymic = 3;
     */
    patronymic: string;
    /**
     * @generated from protobuf field: string birthdate = 4;
     */
    birthdate: string;
    /**
     * @generated from protobuf field: int32 country = 5;
     */
    country: number;
    /**
     * @generated from protobuf field: int32 locale = 6;
     */
    locale: number;
    /**
     * @generated from protobuf field: int32 timezone = 7;
     */
    timezone: number;
}
/**
 * @generated from protobuf message users.UpdatePasswordRequest
 */
export interface UpdatePasswordRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message users.UpdatePhotoRequest
 */
export interface UpdatePhotoRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: bytes photo = 2;
     */
    photo: Uint8Array;
}
/**
 * @generated from protobuf message users.AddPhoneRequest
 */
export interface AddPhoneRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
}
/**
 * @generated from protobuf message users.UpdatePhoneRequest
 */
export interface UpdatePhoneRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
}
/**
 * @generated from protobuf message users.RemovePhoneRequest
 */
export interface RemovePhoneRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CommonRequest$Type extends MessageType<CommonRequest> {
    constructor() {
        super("users.CommonRequest", [
            { no: 2, name: "accountId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommonRequest>): CommonRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        if (value !== undefined)
            reflectionMergePartial<CommonRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonRequest): CommonRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 accountId */ 2:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 accountId = 2; */
        if (message.accountId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.CommonRequest
 */
export const CommonRequest = new CommonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonResponse$Type extends MessageType<CommonResponse> {
    constructor() {
        super("users.CommonResponse", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "codes", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommonResponse>): CommonResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        message.codes = [];
        if (value !== undefined)
            reflectionMergePartial<CommonResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonResponse): CommonResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                case /* repeated uint32 codes */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.codes.push(reader.uint32());
                    else
                        message.codes.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* repeated uint32 codes = 2; */
        if (message.codes.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.codes.length; i++)
                writer.uint32(message.codes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.CommonResponse
 */
export const CommonResponse = new CommonResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HasSessionRequest$Type extends MessageType<HasSessionRequest> {
    constructor() {
        super("users.HasSessionRequest", [
            { no: 1, name: "sessionId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "accountId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HasSessionRequest>): HasSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = 0n;
        message.accountId = 0;
        if (value !== undefined)
            reflectionMergePartial<HasSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HasSessionRequest): HasSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sessionId */ 1:
                    message.sessionId = reader.int64().toBigInt();
                    break;
                case /* uint32 accountId */ 2:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HasSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 sessionId = 1; */
        if (message.sessionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sessionId);
        /* uint32 accountId = 2; */
        if (message.accountId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.HasSessionRequest
 */
export const HasSessionRequest = new HasSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("users.RegisterRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("users.LoginRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("users.LoginResponse", [
            { no: 1, name: "sessionId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "account", kind: "message", T: () => Account }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = 0n;
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sessionId */ 1:
                    message.sessionId = reader.int64().toBigInt();
                    break;
                case /* users.Account account */ 2:
                    message.account = Account.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 sessionId = 1; */
        if (message.sessionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sessionId);
        /* users.Account account = 2; */
        if (message.account)
            Account.internalBinaryWrite(message.account, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Account$Type extends MessageType<Account> {
    constructor() {
        super("users.Account", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phones", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "photo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "patronymic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "birthdate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "country", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "locale", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "timezone", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Account>): Account {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.phones = [];
        message.photo = "";
        message.name = "";
        message.surname = "";
        message.patronymic = "";
        message.birthdate = "";
        message.country = 0;
        message.locale = 0;
        message.timezone = 0;
        if (value !== undefined)
            reflectionMergePartial<Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Account): Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* repeated string phones */ 2:
                    message.phones.push(reader.string());
                    break;
                case /* string photo */ 3:
                    message.photo = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* string surname */ 5:
                    message.surname = reader.string();
                    break;
                case /* string patronymic */ 6:
                    message.patronymic = reader.string();
                    break;
                case /* string birthdate */ 7:
                    message.birthdate = reader.string();
                    break;
                case /* int32 country */ 8:
                    message.country = reader.int32();
                    break;
                case /* int32 locale */ 9:
                    message.locale = reader.int32();
                    break;
                case /* int32 timezone */ 10:
                    message.timezone = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* repeated string phones = 2; */
        for (let i = 0; i < message.phones.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.phones[i]);
        /* string photo = 3; */
        if (message.photo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.photo);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* string surname = 5; */
        if (message.surname !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.surname);
        /* string patronymic = 6; */
        if (message.patronymic !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.patronymic);
        /* string birthdate = 7; */
        if (message.birthdate !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.birthdate);
        /* int32 country = 8; */
        if (message.country !== 0)
            writer.tag(8, WireType.Varint).int32(message.country);
        /* int32 locale = 9; */
        if (message.locale !== 0)
            writer.tag(9, WireType.Varint).int32(message.locale);
        /* int32 timezone = 10; */
        if (message.timezone !== 0)
            writer.tag(10, WireType.Varint).int32(message.timezone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.Account
 */
export const Account = new Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAccountDataRequest$Type extends MessageType<UpdateAccountDataRequest> {
    constructor() {
        super("users.UpdateAccountDataRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "patronymic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "birthdate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "country", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "locale", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "timezone", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAccountDataRequest>): UpdateAccountDataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.surname = "";
        message.patronymic = "";
        message.birthdate = "";
        message.country = 0;
        message.locale = 0;
        message.timezone = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateAccountDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAccountDataRequest): UpdateAccountDataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string surname */ 2:
                    message.surname = reader.string();
                    break;
                case /* string patronymic */ 3:
                    message.patronymic = reader.string();
                    break;
                case /* string birthdate */ 4:
                    message.birthdate = reader.string();
                    break;
                case /* int32 country */ 5:
                    message.country = reader.int32();
                    break;
                case /* int32 locale */ 6:
                    message.locale = reader.int32();
                    break;
                case /* int32 timezone */ 7:
                    message.timezone = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAccountDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string surname = 2; */
        if (message.surname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.surname);
        /* string patronymic = 3; */
        if (message.patronymic !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.patronymic);
        /* string birthdate = 4; */
        if (message.birthdate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.birthdate);
        /* int32 country = 5; */
        if (message.country !== 0)
            writer.tag(5, WireType.Varint).int32(message.country);
        /* int32 locale = 6; */
        if (message.locale !== 0)
            writer.tag(6, WireType.Varint).int32(message.locale);
        /* int32 timezone = 7; */
        if (message.timezone !== 0)
            writer.tag(7, WireType.Varint).int32(message.timezone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.UpdateAccountDataRequest
 */
export const UpdateAccountDataRequest = new UpdateAccountDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePasswordRequest$Type extends MessageType<UpdatePasswordRequest> {
    constructor() {
        super("users.UpdatePasswordRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePasswordRequest>): UpdatePasswordRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.password = "";
        if (value !== undefined)
            reflectionMergePartial<UpdatePasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePasswordRequest): UpdatePasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.UpdatePasswordRequest
 */
export const UpdatePasswordRequest = new UpdatePasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePhotoRequest$Type extends MessageType<UpdatePhotoRequest> {
    constructor() {
        super("users.UpdatePhotoRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "photo", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePhotoRequest>): UpdatePhotoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.photo = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UpdatePhotoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePhotoRequest): UpdatePhotoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* bytes photo */ 2:
                    message.photo = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePhotoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* bytes photo = 2; */
        if (message.photo.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.photo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.UpdatePhotoRequest
 */
export const UpdatePhotoRequest = new UpdatePhotoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddPhoneRequest$Type extends MessageType<AddPhoneRequest> {
    constructor() {
        super("users.AddPhoneRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddPhoneRequest>): AddPhoneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<AddPhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddPhoneRequest): AddPhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddPhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.AddPhoneRequest
 */
export const AddPhoneRequest = new AddPhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePhoneRequest$Type extends MessageType<UpdatePhoneRequest> {
    constructor() {
        super("users.UpdatePhoneRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePhoneRequest>): UpdatePhoneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<UpdatePhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePhoneRequest): UpdatePhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.UpdatePhoneRequest
 */
export const UpdatePhoneRequest = new UpdatePhoneRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemovePhoneRequest$Type extends MessageType<RemovePhoneRequest> {
    constructor() {
        super("users.RemovePhoneRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemovePhoneRequest>): RemovePhoneRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<RemovePhoneRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemovePhoneRequest): RemovePhoneRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemovePhoneRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.RemovePhoneRequest
 */
export const RemovePhoneRequest = new RemovePhoneRequest$Type();
/**
 * @generated ServiceType for protobuf service users.Users
 */
export const Users = new ServiceType("users.Users", [
    { name: "Register", options: {}, I: RegisterRequest, O: LoginResponse },
    { name: "Login", options: {}, I: LoginRequest, O: LoginResponse },
    { name: "HasSession", options: {}, I: HasSessionRequest, O: CommonResponse },
    { name: "GetAccount", options: {}, I: CommonRequest, O: Account },
    { name: "UpdateAccountData", options: {}, I: UpdateAccountDataRequest, O: CommonResponse },
    { name: "UpdatePassword", options: {}, I: UpdatePasswordRequest, O: CommonResponse },
    { name: "UpdatePhoto", options: {}, I: UpdatePhotoRequest, O: CommonResponse },
    { name: "AddPhone", options: {}, I: AddPhoneRequest, O: CommonResponse },
    { name: "UpdatePhone", options: {}, I: UpdatePhotoRequest, O: CommonResponse },
    { name: "RemovePhone", options: {}, I: RemovePhoneRequest, O: CommonResponse }
]);
