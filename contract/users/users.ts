// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "users/users.proto" (package "users", syntax proto3)
// tslint:disable
import { Response } from "../common/common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message users.CommonRequest
 */
export interface CommonRequest {
    /**
     * @generated from protobuf field: uint32 accountId = 2;
     */
    accountId: number;
}
/**
 * @generated from protobuf message users.IdentifyRequest
 */
export interface IdentifyRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string userAgent = 2;
     */
    userAgent: string;
    /**
     * @generated from protobuf field: int32 device = 3;
     */
    device: number;
    /**
     * @generated from protobuf field: string fcm = 5;
     */
    fcm: string;
}
/**
 * @generated from protobuf message users.IdentifyResponse
 */
export interface IdentifyResponse {
    /**
     * @generated from protobuf field: uint32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: map<string, string> errors = 2;
     */
    errors: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: optional users.Account account = 3;
     */
    account?: Account;
    /**
     * @generated from protobuf field: optional users.Registration registration = 4;
     */
    registration?: Registration;
}
/**
 * @generated from protobuf message users.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
}
/**
 * @generated from protobuf message users.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: uint32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: map<string, string> errors = 2;
     */
    errors: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: optional users.LoginData data = 3;
     */
    data?: LoginData;
}
/**
 * @generated from protobuf message users.LoginData
 */
export interface LoginData {
    /**
     * @generated from protobuf field: bool is_new = 1;
     */
    isNew: boolean;
    /**
     * @generated from protobuf field: uint32 type = 2;
     */
    type: number;
    /**
     * @generated from protobuf field: string data = 3;
     */
    data: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiredAt = 4;
     */
    expiredAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated uint32 methods = 5;
     */
    methods: number[];
}
/**
 * @generated from protobuf message users.ConfirmResponse
 */
export interface ConfirmResponse {
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: map<string, string> errors = 2;
     */
    errors: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: string data = 3;
     */
    data: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiredAt = 4;
     */
    expiredAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated uint32 methods = 5;
     */
    methods: number[];
}
/**
 * @generated from protobuf message users.LogoutRequest
 */
export interface LogoutRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message users.Account
 */
export interface Account {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 3;
     */
    surname: string;
    /**
     * @generated from protobuf field: string patronymic = 4;
     */
    patronymic: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp birthdate = 5;
     */
    birthdate?: Timestamp;
    /**
     * @generated from protobuf field: int32 country = 6;
     */
    country: number;
    /**
     * @generated from protobuf field: int32 district = 7;
     */
    district: number;
    /**
     * @generated from protobuf field: int32 locale = 8;
     */
    locale: number;
    /**
     * @generated from protobuf field: int32 timezone = 9;
     */
    timezone: number;
    /**
     * @generated from protobuf field: bytes photo = 10;
     */
    photo: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 14;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 15;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message users.Registration
 */
export interface Registration {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 code = 4;
     */
    code: number;
    /**
     * @generated from protobuf field: int32 timezone = 5;
     */
    timezone: number;
    /**
     * @generated from protobuf field: int32 country = 6;
     */
    country: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 14;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expired_at = 15;
     */
    expiredAt?: Timestamp;
}
/**
 * @generated from protobuf message users.AccountShort
 */
export interface AccountShort {
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 3;
     */
    surname: string;
    /**
     * @generated from protobuf field: string patronymic = 4;
     */
    patronymic: string;
}
/**
 * @generated from protobuf message users.CheckCodeRequest
 */
export interface CheckCodeRequest {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
}
/**
 * @generated from protobuf message users.HasSessionRequest
 */
export interface HasSessionRequest {
    /**
     * @generated from protobuf field: int64 sessionId = 1;
     */
    sessionId: bigint;
    /**
     * @generated from protobuf field: uint32 accountId = 2;
     */
    accountId: number;
}
/**
 * @generated from protobuf message users.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 3;
     */
    surname: string;
    /**
     * @generated from protobuf field: int32 country = 10;
     */
    country: number;
    /**
     * @generated from protobuf field: int32 district = 11;
     */
    district: number;
    /**
     * @generated from protobuf field: int32 locale = 12;
     */
    locale: number;
    /**
     * @generated from protobuf field: int32 timezone = 13;
     */
    timezone: number;
}
// message LoginRequest {
//  string phone = 1;
// }
// 
// message LoginResponse {
//  uint32 status = 1;
//  optional int64 sessionId = 2;
//  optional Account account = 3;
// }

/**
 * @generated from protobuf message users.AccountEmail
 */
export interface AccountEmail {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
    /**
     * @generated from protobuf field: bool is_primary = 3;
     */
    isPrimary: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 4;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 5;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message users.AccountPhone
 */
export interface AccountPhone {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
    /**
     * @generated from protobuf field: bool is_primary = 3;
     */
    isPrimary: boolean;
}
/**
 * @generated from protobuf message users.AccountRole
 */
export interface AccountRole {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: uint32 account_id = 2;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string role = 3;
     */
    role: string;
    /**
     * @generated from protobuf field: int32 order = 4;
     */
    order: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 5;
     */
    createdAt?: Timestamp;
}
/**
 * @generated from protobuf message users.UpdateAccountDataRequest
 */
export interface UpdateAccountDataRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string surname = 2;
     */
    surname: string;
    /**
     * @generated from protobuf field: string patronymic = 3;
     */
    patronymic: string;
    /**
     * @generated from protobuf field: string birthdate = 4;
     */
    birthdate: string;
    /**
     * @generated from protobuf field: int32 country = 5;
     */
    country: number;
    /**
     * @generated from protobuf field: int32 district = 6;
     */
    district: number;
    /**
     * @generated from protobuf field: int32 locale = 7;
     */
    locale: number;
    /**
     * @generated from protobuf field: int32 timezone = 8;
     */
    timezone: number;
}
/**
 * @generated from protobuf message users.PhoneManipulationRequest
 */
export interface PhoneManipulationRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
}
/**
 * @generated from protobuf message users.EmailManipulationRequest
 */
export interface EmailManipulationRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string email = 2;
     */
    email: string;
}
/**
 * @generated from protobuf message users.GetSessionsRequest
 */
export interface GetSessionsRequest {
    /**
     * @generated from protobuf field: int32 accountId = 1;
     */
    accountId: number;
}
/**
 * @generated from protobuf message users.GetSessionsResponse
 */
export interface GetSessionsResponse {
    /**
     * @generated from protobuf field: uint32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated users.Session sessions = 2;
     */
    sessions: Session[];
}
/**
 * @generated from protobuf message users.Session
 */
export interface Session {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int32 account_id = 2;
     */
    accountId: number;
    /**
     * @generated from protobuf field: string ip = 3;
     */
    ip: string;
    /**
     * @generated from protobuf field: string UserAgent = 4 [json_name = "UserAgent"];
     */
    userAgent: string;
    /**
     * @generated from protobuf field: int32 Device = 5 [json_name = "Device"];
     */
    device: number;
    /**
     * @generated from protobuf field: string Fcm = 6 [json_name = "Fcm"];
     */
    fcm: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 7;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp used_at = 8;
     */
    usedAt?: Timestamp;
}
/**
 * @generated from protobuf message users.GetEmailsResponse
 */
export interface GetEmailsResponse {
    /**
     * @generated from protobuf field: uint32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated users.AccountEmail emails = 2;
     */
    emails: AccountEmail[];
}
/**
 * @generated from protobuf message users.GetPhonesResponse
 */
export interface GetPhonesResponse {
    /**
     * @generated from protobuf field: uint32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated users.AccountPhone phones = 2;
     */
    phones: AccountPhone[];
}
/**
 * @generated from protobuf enum users.Method
 */
export enum Method {
    /**
     * @generated from protobuf enum value: IDENTIFY = 0;
     */
    IDENTIFY = 0,
    /**
     * @generated from protobuf enum value: LOGIN = 1;
     */
    LOGIN = 1,
    /**
     * @generated from protobuf enum value: LOGOUT = 2;
     */
    LOGOUT = 2,
    /**
     * @generated from protobuf enum value: CHECK_CODE = 3;
     */
    CHECK_CODE = 3,
    /**
     * @generated from protobuf enum value: GET_ACCOUNT = 4;
     */
    GET_ACCOUNT = 4,
    /**
     * @generated from protobuf enum value: GET_ACCOUNT_SHORT = 5;
     */
    GET_ACCOUNT_SHORT = 5,
    /**
     * @generated from protobuf enum value: GET_SESSIONS = 6;
     */
    GET_SESSIONS = 6,
    /**
     * @generated from protobuf enum value: UPDATE_ACCOUNT_DATA = 7;
     */
    UPDATE_ACCOUNT_DATA = 7,
    /**
     * @generated from protobuf enum value: GET_PHONES = 8;
     */
    GET_PHONES = 8,
    /**
     * @generated from protobuf enum value: ATTACH_PHONE = 9;
     */
    ATTACH_PHONE = 9,
    /**
     * @generated from protobuf enum value: DETACH_PHONE = 10;
     */
    DETACH_PHONE = 10,
    /**
     * @generated from protobuf enum value: SET_PRIMARY_PHONE = 11;
     */
    SET_PRIMARY_PHONE = 11,
    /**
     * @generated from protobuf enum value: GET_EMAILS = 12;
     */
    GET_EMAILS = 12,
    /**
     * @generated from protobuf enum value: ATTACH_EMAIL = 13;
     */
    ATTACH_EMAIL = 13,
    /**
     * @generated from protobuf enum value: DETACH_EMAIL = 14;
     */
    DETACH_EMAIL = 14,
    /**
     * @generated from protobuf enum value: SET_PRIMARY_EMAIL = 15;
     */
    SET_PRIMARY_EMAIL = 15
}
// @generated message type with reflection information, may provide speed optimized methods
class CommonRequest$Type extends MessageType<CommonRequest> {
    constructor() {
        super("users.CommonRequest", [
            { no: 2, name: "accountId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CommonRequest>): CommonRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        if (value !== undefined)
            reflectionMergePartial<CommonRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonRequest): CommonRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 accountId */ 2:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 accountId = 2; */
        if (message.accountId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.CommonRequest
 */
export const CommonRequest = new CommonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentifyRequest$Type extends MessageType<IdentifyRequest> {
    constructor() {
        super("users.IdentifyRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "userAgent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "device", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fcm", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IdentifyRequest>): IdentifyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.userAgent = "";
        message.device = 0;
        message.fcm = "";
        if (value !== undefined)
            reflectionMergePartial<IdentifyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentifyRequest): IdentifyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string userAgent */ 2:
                    message.userAgent = reader.string();
                    break;
                case /* int32 device */ 3:
                    message.device = reader.int32();
                    break;
                case /* string fcm */ 5:
                    message.fcm = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdentifyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string userAgent = 2; */
        if (message.userAgent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userAgent);
        /* int32 device = 3; */
        if (message.device !== 0)
            writer.tag(3, WireType.Varint).int32(message.device);
        /* string fcm = 5; */
        if (message.fcm !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fcm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.IdentifyRequest
 */
export const IdentifyRequest = new IdentifyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentifyResponse$Type extends MessageType<IdentifyResponse> {
    constructor() {
        super("users.IdentifyResponse", [
            { no: 1, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "errors", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "account", kind: "message", T: () => Account },
            { no: 4, name: "registration", kind: "message", T: () => Registration }
        ]);
    }
    create(value?: PartialMessage<IdentifyResponse>): IdentifyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.errors = {};
        if (value !== undefined)
            reflectionMergePartial<IdentifyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdentifyResponse): IdentifyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 status */ 1:
                    message.status = reader.uint32();
                    break;
                case /* map<string, string> errors */ 2:
                    this.binaryReadMap2(message.errors, reader, options);
                    break;
                case /* optional users.Account account */ 3:
                    message.account = Account.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                case /* optional users.Registration registration */ 4:
                    message.registration = Registration.internalBinaryRead(reader, reader.uint32(), options, message.registration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: IdentifyResponse["errors"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof IdentifyResponse["errors"] | undefined, val: IdentifyResponse["errors"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field users.IdentifyResponse.errors");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: IdentifyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).uint32(message.status);
        /* map<string, string> errors = 2; */
        for (let k of globalThis.Object.keys(message.errors))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.errors[k]).join();
        /* optional users.Account account = 3; */
        if (message.account)
            Account.internalBinaryWrite(message.account, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional users.Registration registration = 4; */
        if (message.registration)
            Registration.internalBinaryWrite(message.registration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.IdentifyResponse
 */
export const IdentifyResponse = new IdentifyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("users.LoginRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("users.LoginResponse", [
            { no: 1, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "errors", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "data", kind: "message", T: () => LoginData }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.errors = {};
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 status */ 1:
                    message.status = reader.uint32();
                    break;
                case /* map<string, string> errors */ 2:
                    this.binaryReadMap2(message.errors, reader, options);
                    break;
                case /* optional users.LoginData data */ 3:
                    message.data = LoginData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: LoginResponse["errors"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof LoginResponse["errors"] | undefined, val: LoginResponse["errors"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field users.LoginResponse.errors");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).uint32(message.status);
        /* map<string, string> errors = 2; */
        for (let k of globalThis.Object.keys(message.errors))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.errors[k]).join();
        /* optional users.LoginData data = 3; */
        if (message.data)
            LoginData.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginData$Type extends MessageType<LoginData> {
    constructor() {
        super("users.LoginData", [
            { no: 1, name: "is_new", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "expiredAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "methods", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LoginData>): LoginData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isNew = false;
        message.type = 0;
        message.data = "";
        message.methods = [];
        if (value !== undefined)
            reflectionMergePartial<LoginData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginData): LoginData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_new */ 1:
                    message.isNew = reader.bool();
                    break;
                case /* uint32 type */ 2:
                    message.type = reader.uint32();
                    break;
                case /* string data */ 3:
                    message.data = reader.string();
                    break;
                case /* google.protobuf.Timestamp expiredAt */ 4:
                    message.expiredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiredAt);
                    break;
                case /* repeated uint32 methods */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.methods.push(reader.uint32());
                    else
                        message.methods.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_new = 1; */
        if (message.isNew !== false)
            writer.tag(1, WireType.Varint).bool(message.isNew);
        /* uint32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).uint32(message.type);
        /* string data = 3; */
        if (message.data !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.data);
        /* google.protobuf.Timestamp expiredAt = 4; */
        if (message.expiredAt)
            Timestamp.internalBinaryWrite(message.expiredAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 methods = 5; */
        if (message.methods.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.methods.length; i++)
                writer.uint32(message.methods[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.LoginData
 */
export const LoginData = new LoginData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmResponse$Type extends MessageType<ConfirmResponse> {
    constructor() {
        super("users.ConfirmResponse", [
            { no: 1, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "errors", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "expiredAt", kind: "message", T: () => Timestamp },
            { no: 5, name: "methods", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ConfirmResponse>): ConfirmResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.errors = {};
        message.data = "";
        message.methods = [];
        if (value !== undefined)
            reflectionMergePartial<ConfirmResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfirmResponse): ConfirmResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* map<string, string> errors */ 2:
                    this.binaryReadMap2(message.errors, reader, options);
                    break;
                case /* string data */ 3:
                    message.data = reader.string();
                    break;
                case /* google.protobuf.Timestamp expiredAt */ 4:
                    message.expiredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiredAt);
                    break;
                case /* repeated uint32 methods */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.methods.push(reader.uint32());
                    else
                        message.methods.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ConfirmResponse["errors"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ConfirmResponse["errors"] | undefined, val: ConfirmResponse["errors"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field users.ConfirmResponse.errors");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ConfirmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* map<string, string> errors = 2; */
        for (let k of globalThis.Object.keys(message.errors))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.errors[k]).join();
        /* string data = 3; */
        if (message.data !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.data);
        /* google.protobuf.Timestamp expiredAt = 4; */
        if (message.expiredAt)
            Timestamp.internalBinaryWrite(message.expiredAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 methods = 5; */
        if (message.methods.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.methods.length; i++)
                writer.uint32(message.methods[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.ConfirmResponse
 */
export const ConfirmResponse = new ConfirmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRequest$Type extends MessageType<LogoutRequest> {
    constructor() {
        super("users.LogoutRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutRequest>): LogoutRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<LogoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutRequest): LogoutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.LogoutRequest
 */
export const LogoutRequest = new LogoutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Account$Type extends MessageType<Account> {
    constructor() {
        super("users.Account", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "patronymic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "birthdate", kind: "message", T: () => Timestamp },
            { no: 6, name: "country", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "district", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "locale", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "timezone", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "photo", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 14, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 15, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Account>): Account {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.surname = "";
        message.patronymic = "";
        message.country = 0;
        message.district = 0;
        message.locale = 0;
        message.timezone = 0;
        message.photo = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Account): Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string surname */ 3:
                    message.surname = reader.string();
                    break;
                case /* string patronymic */ 4:
                    message.patronymic = reader.string();
                    break;
                case /* google.protobuf.Timestamp birthdate */ 5:
                    message.birthdate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.birthdate);
                    break;
                case /* int32 country */ 6:
                    message.country = reader.int32();
                    break;
                case /* int32 district */ 7:
                    message.district = reader.int32();
                    break;
                case /* int32 locale */ 8:
                    message.locale = reader.int32();
                    break;
                case /* int32 timezone */ 9:
                    message.timezone = reader.int32();
                    break;
                case /* bytes photo */ 10:
                    message.photo = reader.bytes();
                    break;
                case /* google.protobuf.Timestamp created_at */ 14:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 15:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string surname = 3; */
        if (message.surname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.surname);
        /* string patronymic = 4; */
        if (message.patronymic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.patronymic);
        /* google.protobuf.Timestamp birthdate = 5; */
        if (message.birthdate)
            Timestamp.internalBinaryWrite(message.birthdate, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 country = 6; */
        if (message.country !== 0)
            writer.tag(6, WireType.Varint).int32(message.country);
        /* int32 district = 7; */
        if (message.district !== 0)
            writer.tag(7, WireType.Varint).int32(message.district);
        /* int32 locale = 8; */
        if (message.locale !== 0)
            writer.tag(8, WireType.Varint).int32(message.locale);
        /* int32 timezone = 9; */
        if (message.timezone !== 0)
            writer.tag(9, WireType.Varint).int32(message.timezone);
        /* bytes photo = 10; */
        if (message.photo.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.photo);
        /* google.protobuf.Timestamp created_at = 14; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 15; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.Account
 */
export const Account = new Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Registration$Type extends MessageType<Registration> {
    constructor() {
        super("users.Registration", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "timezone", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "country", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 15, name: "expired_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Registration>): Registration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.phone = "";
        message.type = 0;
        message.code = 0;
        message.timezone = 0;
        message.country = 0;
        if (value !== undefined)
            reflectionMergePartial<Registration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Registration): Registration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int32 code */ 4:
                    message.code = reader.int32();
                    break;
                case /* int32 timezone */ 5:
                    message.timezone = reader.int32();
                    break;
                case /* int32 country */ 6:
                    message.country = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_at */ 14:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp expired_at */ 15:
                    message.expiredAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiredAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Registration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int32 code = 4; */
        if (message.code !== 0)
            writer.tag(4, WireType.Varint).int32(message.code);
        /* int32 timezone = 5; */
        if (message.timezone !== 0)
            writer.tag(5, WireType.Varint).int32(message.timezone);
        /* int32 country = 6; */
        if (message.country !== 0)
            writer.tag(6, WireType.Varint).int32(message.country);
        /* google.protobuf.Timestamp created_at = 14; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expired_at = 15; */
        if (message.expiredAt)
            Timestamp.internalBinaryWrite(message.expiredAt, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.Registration
 */
export const Registration = new Registration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountShort$Type extends MessageType<AccountShort> {
    constructor() {
        super("users.AccountShort", [
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "patronymic", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AccountShort>): AccountShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.surname = "";
        message.patronymic = "";
        if (value !== undefined)
            reflectionMergePartial<AccountShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountShort): AccountShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string surname */ 3:
                    message.surname = reader.string();
                    break;
                case /* string patronymic */ 4:
                    message.patronymic = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string surname = 3; */
        if (message.surname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.surname);
        /* string patronymic = 4; */
        if (message.patronymic !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.patronymic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.AccountShort
 */
export const AccountShort = new AccountShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckCodeRequest$Type extends MessageType<CheckCodeRequest> {
    constructor() {
        super("users.CheckCodeRequest", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CheckCodeRequest>): CheckCodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<CheckCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckCodeRequest): CheckCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.CheckCodeRequest
 */
export const CheckCodeRequest = new CheckCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HasSessionRequest$Type extends MessageType<HasSessionRequest> {
    constructor() {
        super("users.HasSessionRequest", [
            { no: 1, name: "sessionId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "accountId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HasSessionRequest>): HasSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = 0n;
        message.accountId = 0;
        if (value !== undefined)
            reflectionMergePartial<HasSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HasSessionRequest): HasSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sessionId */ 1:
                    message.sessionId = reader.int64().toBigInt();
                    break;
                case /* uint32 accountId */ 2:
                    message.accountId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HasSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 sessionId = 1; */
        if (message.sessionId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sessionId);
        /* uint32 accountId = 2; */
        if (message.accountId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.HasSessionRequest
 */
export const HasSessionRequest = new HasSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("users.RegisterRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "country", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "district", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "locale", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "timezone", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phone = "";
        message.name = "";
        message.surname = "";
        message.country = 0;
        message.district = 0;
        message.locale = 0;
        message.timezone = 0;
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string surname */ 3:
                    message.surname = reader.string();
                    break;
                case /* int32 country */ 10:
                    message.country = reader.int32();
                    break;
                case /* int32 district */ 11:
                    message.district = reader.int32();
                    break;
                case /* int32 locale */ 12:
                    message.locale = reader.int32();
                    break;
                case /* int32 timezone */ 13:
                    message.timezone = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string surname = 3; */
        if (message.surname !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.surname);
        /* int32 country = 10; */
        if (message.country !== 0)
            writer.tag(10, WireType.Varint).int32(message.country);
        /* int32 district = 11; */
        if (message.district !== 0)
            writer.tag(11, WireType.Varint).int32(message.district);
        /* int32 locale = 12; */
        if (message.locale !== 0)
            writer.tag(12, WireType.Varint).int32(message.locale);
        /* int32 timezone = 13; */
        if (message.timezone !== 0)
            writer.tag(13, WireType.Varint).int32(message.timezone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountEmail$Type extends MessageType<AccountEmail> {
    constructor() {
        super("users.AccountEmail", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<AccountEmail>): AccountEmail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.email = "";
        message.isPrimary = false;
        if (value !== undefined)
            reflectionMergePartial<AccountEmail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountEmail): AccountEmail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* bool is_primary */ 3:
                    message.isPrimary = reader.bool();
                    break;
                case /* google.protobuf.Timestamp created_at */ 4:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 5:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountEmail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* bool is_primary = 3; */
        if (message.isPrimary !== false)
            writer.tag(3, WireType.Varint).bool(message.isPrimary);
        /* google.protobuf.Timestamp created_at = 4; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 5; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.AccountEmail
 */
export const AccountEmail = new AccountEmail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountPhone$Type extends MessageType<AccountPhone> {
    constructor() {
        super("users.AccountPhone", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AccountPhone>): AccountPhone {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.phone = "";
        message.isPrimary = false;
        if (value !== undefined)
            reflectionMergePartial<AccountPhone>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountPhone): AccountPhone {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                case /* bool is_primary */ 3:
                    message.isPrimary = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountPhone, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        /* bool is_primary = 3; */
        if (message.isPrimary !== false)
            writer.tag(3, WireType.Varint).bool(message.isPrimary);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.AccountPhone
 */
export const AccountPhone = new AccountPhone$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountRole$Type extends MessageType<AccountRole> {
    constructor() {
        super("users.AccountRole", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "role", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<AccountRole>): AccountRole {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.accountId = 0;
        message.role = "";
        message.order = 0;
        if (value !== undefined)
            reflectionMergePartial<AccountRole>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountRole): AccountRole {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* uint32 account_id */ 2:
                    message.accountId = reader.uint32();
                    break;
                case /* string role */ 3:
                    message.role = reader.string();
                    break;
                case /* int32 order */ 4:
                    message.order = reader.int32();
                    break;
                case /* google.protobuf.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountRole, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint32 account_id = 2; */
        if (message.accountId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.accountId);
        /* string role = 3; */
        if (message.role !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.role);
        /* int32 order = 4; */
        if (message.order !== 0)
            writer.tag(4, WireType.Varint).int32(message.order);
        /* google.protobuf.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.AccountRole
 */
export const AccountRole = new AccountRole$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAccountDataRequest$Type extends MessageType<UpdateAccountDataRequest> {
    constructor() {
        super("users.UpdateAccountDataRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "surname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "patronymic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "birthdate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "country", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "district", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "locale", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "timezone", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAccountDataRequest>): UpdateAccountDataRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.surname = "";
        message.patronymic = "";
        message.birthdate = "";
        message.country = 0;
        message.district = 0;
        message.locale = 0;
        message.timezone = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateAccountDataRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAccountDataRequest): UpdateAccountDataRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string surname */ 2:
                    message.surname = reader.string();
                    break;
                case /* string patronymic */ 3:
                    message.patronymic = reader.string();
                    break;
                case /* string birthdate */ 4:
                    message.birthdate = reader.string();
                    break;
                case /* int32 country */ 5:
                    message.country = reader.int32();
                    break;
                case /* int32 district */ 6:
                    message.district = reader.int32();
                    break;
                case /* int32 locale */ 7:
                    message.locale = reader.int32();
                    break;
                case /* int32 timezone */ 8:
                    message.timezone = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAccountDataRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string surname = 2; */
        if (message.surname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.surname);
        /* string patronymic = 3; */
        if (message.patronymic !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.patronymic);
        /* string birthdate = 4; */
        if (message.birthdate !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.birthdate);
        /* int32 country = 5; */
        if (message.country !== 0)
            writer.tag(5, WireType.Varint).int32(message.country);
        /* int32 district = 6; */
        if (message.district !== 0)
            writer.tag(6, WireType.Varint).int32(message.district);
        /* int32 locale = 7; */
        if (message.locale !== 0)
            writer.tag(7, WireType.Varint).int32(message.locale);
        /* int32 timezone = 8; */
        if (message.timezone !== 0)
            writer.tag(8, WireType.Varint).int32(message.timezone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.UpdateAccountDataRequest
 */
export const UpdateAccountDataRequest = new UpdateAccountDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhoneManipulationRequest$Type extends MessageType<PhoneManipulationRequest> {
    constructor() {
        super("users.PhoneManipulationRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PhoneManipulationRequest>): PhoneManipulationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<PhoneManipulationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhoneManipulationRequest): PhoneManipulationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhoneManipulationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.PhoneManipulationRequest
 */
export const PhoneManipulationRequest = new PhoneManipulationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmailManipulationRequest$Type extends MessageType<EmailManipulationRequest> {
    constructor() {
        super("users.EmailManipulationRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmailManipulationRequest>): EmailManipulationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        message.email = "";
        if (value !== undefined)
            reflectionMergePartial<EmailManipulationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailManipulationRequest): EmailManipulationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailManipulationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.EmailManipulationRequest
 */
export const EmailManipulationRequest = new EmailManipulationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionsRequest$Type extends MessageType<GetSessionsRequest> {
    constructor() {
        super("users.GetSessionsRequest", [
            { no: 1, name: "accountId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSessionsRequest>): GetSessionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSessionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionsRequest): GetSessionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 accountId */ 1:
                    message.accountId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 accountId = 1; */
        if (message.accountId !== 0)
            writer.tag(1, WireType.Varint).int32(message.accountId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.GetSessionsRequest
 */
export const GetSessionsRequest = new GetSessionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionsResponse$Type extends MessageType<GetSessionsResponse> {
    constructor() {
        super("users.GetSessionsResponse", [
            { no: 1, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Session }
        ]);
    }
    create(value?: PartialMessage<GetSessionsResponse>): GetSessionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.sessions = [];
        if (value !== undefined)
            reflectionMergePartial<GetSessionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionsResponse): GetSessionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 status */ 1:
                    message.status = reader.uint32();
                    break;
                case /* repeated users.Session sessions */ 2:
                    message.sessions.push(Session.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).uint32(message.status);
        /* repeated users.Session sessions = 2; */
        for (let i = 0; i < message.sessions.length; i++)
            Session.internalBinaryWrite(message.sessions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.GetSessionsResponse
 */
export const GetSessionsResponse = new GetSessionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Session$Type extends MessageType<Session> {
    constructor() {
        super("users.Session", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "UserAgent", kind: "scalar", jsonName: "UserAgent", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Device", kind: "scalar", jsonName: "Device", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "Fcm", kind: "scalar", jsonName: "Fcm", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "used_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Session>): Session {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.accountId = 0;
        message.ip = "";
        message.userAgent = "";
        message.device = 0;
        message.fcm = "";
        if (value !== undefined)
            reflectionMergePartial<Session>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Session): Session {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int32 account_id */ 2:
                    message.accountId = reader.int32();
                    break;
                case /* string ip */ 3:
                    message.ip = reader.string();
                    break;
                case /* string UserAgent = 4 [json_name = "UserAgent"];*/ 4:
                    message.userAgent = reader.string();
                    break;
                case /* int32 Device = 5 [json_name = "Device"];*/ 5:
                    message.device = reader.int32();
                    break;
                case /* string Fcm = 6 [json_name = "Fcm"];*/ 6:
                    message.fcm = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 7:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp used_at */ 8:
                    message.usedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.usedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Session, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int32 account_id = 2; */
        if (message.accountId !== 0)
            writer.tag(2, WireType.Varint).int32(message.accountId);
        /* string ip = 3; */
        if (message.ip !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ip);
        /* string UserAgent = 4 [json_name = "UserAgent"]; */
        if (message.userAgent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.userAgent);
        /* int32 Device = 5 [json_name = "Device"]; */
        if (message.device !== 0)
            writer.tag(5, WireType.Varint).int32(message.device);
        /* string Fcm = 6 [json_name = "Fcm"]; */
        if (message.fcm !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fcm);
        /* google.protobuf.Timestamp created_at = 7; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp used_at = 8; */
        if (message.usedAt)
            Timestamp.internalBinaryWrite(message.usedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.Session
 */
export const Session = new Session$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetEmailsResponse$Type extends MessageType<GetEmailsResponse> {
    constructor() {
        super("users.GetEmailsResponse", [
            { no: 1, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "emails", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AccountEmail }
        ]);
    }
    create(value?: PartialMessage<GetEmailsResponse>): GetEmailsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.emails = [];
        if (value !== undefined)
            reflectionMergePartial<GetEmailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetEmailsResponse): GetEmailsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 status */ 1:
                    message.status = reader.uint32();
                    break;
                case /* repeated users.AccountEmail emails */ 2:
                    message.emails.push(AccountEmail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetEmailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).uint32(message.status);
        /* repeated users.AccountEmail emails = 2; */
        for (let i = 0; i < message.emails.length; i++)
            AccountEmail.internalBinaryWrite(message.emails[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.GetEmailsResponse
 */
export const GetEmailsResponse = new GetEmailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPhonesResponse$Type extends MessageType<GetPhonesResponse> {
    constructor() {
        super("users.GetPhonesResponse", [
            { no: 1, name: "status", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "phones", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AccountPhone }
        ]);
    }
    create(value?: PartialMessage<GetPhonesResponse>): GetPhonesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.phones = [];
        if (value !== undefined)
            reflectionMergePartial<GetPhonesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPhonesResponse): GetPhonesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 status */ 1:
                    message.status = reader.uint32();
                    break;
                case /* repeated users.AccountPhone phones */ 2:
                    message.phones.push(AccountPhone.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPhonesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).uint32(message.status);
        /* repeated users.AccountPhone phones = 2; */
        for (let i = 0; i < message.phones.length; i++)
            AccountPhone.internalBinaryWrite(message.phones[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message users.GetPhonesResponse
 */
export const GetPhonesResponse = new GetPhonesResponse$Type();
/**
 * @generated ServiceType for protobuf service users.Users
 */
export const Users = new ServiceType("users.Users", [
    { name: "Identify", options: {}, I: IdentifyRequest, O: IdentifyResponse },
    { name: "Login", options: {}, I: LoginRequest, O: LoginResponse },
    { name: "Logout", options: {}, I: LogoutRequest, O: Response },
    { name: "CheckCode", options: {}, I: CheckCodeRequest, O: Response },
    { name: "GetAccount", options: {}, I: CommonRequest, O: Account },
    { name: "GetAccountShort", options: {}, I: CommonRequest, O: Account },
    { name: "GetSessions", options: {}, I: CommonRequest, O: GetSessionsResponse },
    { name: "UpdateAccountData", options: {}, I: UpdateAccountDataRequest, O: Response },
    { name: "GetPhones", options: {}, I: CommonRequest, O: GetPhonesResponse },
    { name: "AttachPhone", options: {}, I: PhoneManipulationRequest, O: ConfirmResponse },
    { name: "DetachPhone", options: {}, I: PhoneManipulationRequest, O: ConfirmResponse },
    { name: "SetPrimaryPhone", options: {}, I: PhoneManipulationRequest, O: ConfirmResponse },
    { name: "GetEmails", options: {}, I: CommonRequest, O: GetEmailsResponse },
    { name: "AttachEmail", options: {}, I: EmailManipulationRequest, O: ConfirmResponse },
    { name: "DetachEmail", options: {}, I: EmailManipulationRequest, O: ConfirmResponse },
    { name: "SetPrimaryEmail", options: {}, I: EmailManipulationRequest, O: ConfirmResponse }
]);
