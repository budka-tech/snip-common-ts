// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "s3/s3.proto" (package "s3", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Endpoint } from "./s3";
import type { GetImagesInBucketResponse } from "./s3";
import type { GetImagesInBucketRequest } from "./s3";
import type { GetAllImagesResponse } from "./s3";
import type { GetAllImagesRequest } from "./s3";
import type { DeleteImageRequest } from "./s3";
import type { GetImageWithBucketResponse } from "./s3";
import type { GetImageWithBucketRequest } from "./s3";
import type { GetImageResponse } from "./s3";
import type { GetImageRequest } from "./s3";
import type { CreateImageResponse } from "./s3";
import type { CreateImageRequest } from "./s3";
import type { GetAllBucketsResponse } from "./s3";
import type { GetAllBucketsRequest } from "./s3";
import type { Response } from "../common/common";
import type { UnregisterBucketRequest } from "./s3";
import type { HasBucketResponse } from "./s3";
import type { HasBucketRequest } from "./s3";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RegisterBucketResponse } from "./s3";
import type { RegisterBucketRequest } from "./s3";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Endpoint service definition
 *
 * @generated from protobuf service s3.Endpoint
 */
export interface IEndpointClient {
    /**
     * @generated from protobuf rpc: RegisterBucket(s3.RegisterBucketRequest) returns (s3.RegisterBucketResponse);
     */
    registerBucket(input: RegisterBucketRequest, options?: RpcOptions): UnaryCall<RegisterBucketRequest, RegisterBucketResponse>;
    /**
     * @generated from protobuf rpc: HasBucket(s3.HasBucketRequest) returns (s3.HasBucketResponse);
     */
    hasBucket(input: HasBucketRequest, options?: RpcOptions): UnaryCall<HasBucketRequest, HasBucketResponse>;
    /**
     * @generated from protobuf rpc: UnregisterBucket(s3.UnregisterBucketRequest) returns (common.Response);
     */
    unregisterBucket(input: UnregisterBucketRequest, options?: RpcOptions): UnaryCall<UnregisterBucketRequest, Response>;
    /**
     * @generated from protobuf rpc: GetAllBuckets(s3.GetAllBucketsRequest) returns (s3.GetAllBucketsResponse);
     */
    getAllBuckets(input: GetAllBucketsRequest, options?: RpcOptions): UnaryCall<GetAllBucketsRequest, GetAllBucketsResponse>;
    /**
     * @generated from protobuf rpc: CreateImage(s3.CreateImageRequest) returns (s3.CreateImageResponse);
     */
    createImage(input: CreateImageRequest, options?: RpcOptions): UnaryCall<CreateImageRequest, CreateImageResponse>;
    /**
     * @generated from protobuf rpc: GetImage(s3.GetImageRequest) returns (s3.GetImageResponse);
     */
    getImage(input: GetImageRequest, options?: RpcOptions): UnaryCall<GetImageRequest, GetImageResponse>;
    /**
     * @generated from protobuf rpc: GetImageWithBucket(s3.GetImageWithBucketRequest) returns (s3.GetImageWithBucketResponse);
     */
    getImageWithBucket(input: GetImageWithBucketRequest, options?: RpcOptions): UnaryCall<GetImageWithBucketRequest, GetImageWithBucketResponse>;
    /**
     * @generated from protobuf rpc: DeleteImage(s3.DeleteImageRequest) returns (common.Response);
     */
    deleteImage(input: DeleteImageRequest, options?: RpcOptions): UnaryCall<DeleteImageRequest, Response>;
    /**
     * @generated from protobuf rpc: GetAllImages(s3.GetAllImagesRequest) returns (s3.GetAllImagesResponse);
     */
    getAllImages(input: GetAllImagesRequest, options?: RpcOptions): UnaryCall<GetAllImagesRequest, GetAllImagesResponse>;
    /**
     * @generated from protobuf rpc: GetImagesInBucket(s3.GetImagesInBucketRequest) returns (s3.GetImagesInBucketResponse);
     */
    getImagesInBucket(input: GetImagesInBucketRequest, options?: RpcOptions): UnaryCall<GetImagesInBucketRequest, GetImagesInBucketResponse>;
}
/**
 * Endpoint service definition
 *
 * @generated from protobuf service s3.Endpoint
 */
export class EndpointClient implements IEndpointClient, ServiceInfo {
    typeName = Endpoint.typeName;
    methods = Endpoint.methods;
    options = Endpoint.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RegisterBucket(s3.RegisterBucketRequest) returns (s3.RegisterBucketResponse);
     */
    registerBucket(input: RegisterBucketRequest, options?: RpcOptions): UnaryCall<RegisterBucketRequest, RegisterBucketResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterBucketRequest, RegisterBucketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: HasBucket(s3.HasBucketRequest) returns (s3.HasBucketResponse);
     */
    hasBucket(input: HasBucketRequest, options?: RpcOptions): UnaryCall<HasBucketRequest, HasBucketResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<HasBucketRequest, HasBucketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnregisterBucket(s3.UnregisterBucketRequest) returns (common.Response);
     */
    unregisterBucket(input: UnregisterBucketRequest, options?: RpcOptions): UnaryCall<UnregisterBucketRequest, Response> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnregisterBucketRequest, Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllBuckets(s3.GetAllBucketsRequest) returns (s3.GetAllBucketsResponse);
     */
    getAllBuckets(input: GetAllBucketsRequest, options?: RpcOptions): UnaryCall<GetAllBucketsRequest, GetAllBucketsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllBucketsRequest, GetAllBucketsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateImage(s3.CreateImageRequest) returns (s3.CreateImageResponse);
     */
    createImage(input: CreateImageRequest, options?: RpcOptions): UnaryCall<CreateImageRequest, CreateImageResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateImageRequest, CreateImageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetImage(s3.GetImageRequest) returns (s3.GetImageResponse);
     */
    getImage(input: GetImageRequest, options?: RpcOptions): UnaryCall<GetImageRequest, GetImageResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetImageRequest, GetImageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetImageWithBucket(s3.GetImageWithBucketRequest) returns (s3.GetImageWithBucketResponse);
     */
    getImageWithBucket(input: GetImageWithBucketRequest, options?: RpcOptions): UnaryCall<GetImageWithBucketRequest, GetImageWithBucketResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetImageWithBucketRequest, GetImageWithBucketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteImage(s3.DeleteImageRequest) returns (common.Response);
     */
    deleteImage(input: DeleteImageRequest, options?: RpcOptions): UnaryCall<DeleteImageRequest, Response> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteImageRequest, Response>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllImages(s3.GetAllImagesRequest) returns (s3.GetAllImagesResponse);
     */
    getAllImages(input: GetAllImagesRequest, options?: RpcOptions): UnaryCall<GetAllImagesRequest, GetAllImagesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllImagesRequest, GetAllImagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetImagesInBucket(s3.GetImagesInBucketRequest) returns (s3.GetImagesInBucketResponse);
     */
    getImagesInBucket(input: GetImagesInBucketRequest, options?: RpcOptions): UnaryCall<GetImagesInBucketRequest, GetImagesInBucketResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetImagesInBucketRequest, GetImagesInBucketResponse>("unary", this._transport, method, opt, input);
    }
}
