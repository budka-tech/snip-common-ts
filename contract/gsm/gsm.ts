// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "gsm/gsm.proto" (package "gsm", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message gsm.GetSmsRequest
 */
export interface GetSmsRequest {
    /**
     * @generated from protobuf field: int32 userId = 1;
     */
    userId: number;
    /**
     * @generated from protobuf field: string phone = 2;
     */
    phone: string;
}
/**
 * @generated from protobuf message gsm.GetSmsResponse
 */
export interface GetSmsResponse {
    /**
     * @generated from protobuf field: string sms = 1;
     */
    sms: string;
}
/**
 * @generated from protobuf message gsm.GetFlashCallRequest
 */
export interface GetFlashCallRequest {
    /**
     * @generated from protobuf field: string phone = 1;
     */
    phone: string;
}
/**
 * @generated from protobuf message gsm.GetFlashCallResponse
 */
export interface GetFlashCallResponse {
    /**
     * @generated from protobuf field: bool status = 1;
     */
    status: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetSmsRequest$Type extends MessageType<GetSmsRequest> {
    constructor() {
        super("gsm.GetSmsRequest", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSmsRequest>): GetSmsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<GetSmsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSmsRequest): GetSmsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* string phone */ 2:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSmsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* string phone = 2; */
        if (message.phone !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gsm.GetSmsRequest
 */
export const GetSmsRequest = new GetSmsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSmsResponse$Type extends MessageType<GetSmsResponse> {
    constructor() {
        super("gsm.GetSmsResponse", [
            { no: 1, name: "sms", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSmsResponse>): GetSmsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sms = "";
        if (value !== undefined)
            reflectionMergePartial<GetSmsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSmsResponse): GetSmsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sms */ 1:
                    message.sms = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSmsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sms = 1; */
        if (message.sms !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sms);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gsm.GetSmsResponse
 */
export const GetSmsResponse = new GetSmsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFlashCallRequest$Type extends MessageType<GetFlashCallRequest> {
    constructor() {
        super("gsm.GetFlashCallRequest", [
            { no: 1, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFlashCallRequest>): GetFlashCallRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<GetFlashCallRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFlashCallRequest): GetFlashCallRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string phone */ 1:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFlashCallRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string phone = 1; */
        if (message.phone !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gsm.GetFlashCallRequest
 */
export const GetFlashCallRequest = new GetFlashCallRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFlashCallResponse$Type extends MessageType<GetFlashCallResponse> {
    constructor() {
        super("gsm.GetFlashCallResponse", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetFlashCallResponse>): GetFlashCallResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<GetFlashCallResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFlashCallResponse): GetFlashCallResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFlashCallResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message gsm.GetFlashCallResponse
 */
export const GetFlashCallResponse = new GetFlashCallResponse$Type();
/**
 * @generated ServiceType for protobuf service gsm.Gsm
 */
export const Gsm = new ServiceType("gsm.Gsm", [
    { name: "GetSms", options: {}, I: GetSmsRequest, O: GetSmsResponse },
    { name: "GetFlashCall", options: {}, I: GetFlashCallRequest, O: GetFlashCallResponse }
]);
