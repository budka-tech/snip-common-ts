// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "server/server.proto" (package "server", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Server } from "./server";
import type { HeartbeatMessage } from "./server";
import type { SubscribeResponse } from "./server";
import type { SubscribeRequest } from "./server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CallResponse } from "./server";
import type { CallRequest } from "./server";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service server.Server
 */
export interface IServerClient {
    /**
     * @generated from protobuf rpc: Call(server.CallRequest) returns (server.CallResponse);
     */
    call(input: CallRequest, options?: RpcOptions): UnaryCall<CallRequest, CallResponse>;
    /**
     * @generated from protobuf rpc: Subscribe(server.SubscribeRequest) returns (server.SubscribeResponse);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): UnaryCall<SubscribeRequest, SubscribeResponse>;
    /**
     * @generated from protobuf rpc: Heartbeat(server.HeartbeatMessage) returns (server.HeartbeatMessage);
     */
    heartbeat(input: HeartbeatMessage, options?: RpcOptions): UnaryCall<HeartbeatMessage, HeartbeatMessage>;
}
/**
 * @generated from protobuf service server.Server
 */
export class ServerClient implements IServerClient, ServiceInfo {
    typeName = Server.typeName;
    methods = Server.methods;
    options = Server.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Call(server.CallRequest) returns (server.CallResponse);
     */
    call(input: CallRequest, options?: RpcOptions): UnaryCall<CallRequest, CallResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CallRequest, CallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Subscribe(server.SubscribeRequest) returns (server.SubscribeResponse);
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): UnaryCall<SubscribeRequest, SubscribeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRequest, SubscribeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Heartbeat(server.HeartbeatMessage) returns (server.HeartbeatMessage);
     */
    heartbeat(input: HeartbeatMessage, options?: RpcOptions): UnaryCall<HeartbeatMessage, HeartbeatMessage> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<HeartbeatMessage, HeartbeatMessage>("unary", this._transport, method, opt, input);
    }
}
